use serde::Deserialize;

/// Represents the root data structure containing collections of chat and image model configurations.
///
/// This struct holds two vectors:
/// * `chat` - A collection of chat model configurations
/// * `image` - A collection of image model configurations
#[derive(Deserialize)]
pub struct ModelData {
    chat: Vec<ChatModel>,
    image: Vec<ImageModel>,
}

/// Represents configuration for a specific chat model.
///
/// This struct holds the configuration parameters for a chat model, including:
/// * `name` - The display name of the chat model
/// * `model` - The internal model identifier
/// * `word_limit` - Maximum number of input words allowed
/// * `max_output` - Maximum number of output tokens/responses
/// * `pricing` - The pricing configuration for this chat model
#[derive(Deserialize)]
pub struct ChatModel {
    name: String,
    model: String,
    word_limit: u32,
    max_output: u16,
    pricing: ChatPricing,
}

/// Represents pricing configuration for chat models.
///
/// This struct contains:
/// * `coins` - The number of coins charged for using this chat model
/// * `words` - The number of words provided per coin spent
#[derive(Deserialize)]
pub struct ChatPricing {
    coins: u8,
    words: u8,
}

/// Represents configuration for a specific image model.
///
/// This struct holds the configuration parameters for an image model, including:
/// * `name` - The display name of the image model
/// * `model` - The internal model identifier
/// * `pricing` - The pricing configuration for different image size formats
#[derive(Deserialize)]
pub struct ImageModel {
    name: String,
    model: String,
    pricing: ImagePricing,
}

/// Represents pricing configuration for image models with different format options.
///
/// This struct contains pricing configurations for three image formats:
/// * `square` - Pricing for square format images
/// * `landscape` - Pricing for landscape format images
/// * `portrait` - Pricing for portrait format images
#[derive(Deserialize)]
pub struct ImagePricing {
    square: SizePricing,
    landscape: SizePricing,
    portrait: SizePricing,
}

/// Represents pricing configuration for specific image size formats.
///
/// This struct contains:
/// * `coins` - The number of coins charged for this image size format
/// * `size` - The dimensions of the image in "width x height" format
#[derive(Deserialize)]
pub struct SizePricing {
    coins: u8,
    size: String,
}

impl ModelData {
    /// Returns a reference to the vector of chat model configurations.
    ///
    /// This function provides read-only access to the collection of chat models
    /// defined in this ModelData instance.
    pub fn chat(&self) -> &Vec<ChatModel> {
        &self.chat
    }

    /// Returns a reference to the vector of image model configurations.
    ///
    /// This function provides read-only access to the collection of image models
    /// defined in this ModelData instance.
    pub fn image(&self) -> &Vec<ImageModel> {
        &self.image
    }
}

impl ChatModel {
    /// Returns a reference to the name of this chat model.
    ///
    /// This function provides read-only access to the display name
    /// of this ChatModel instance.
    pub fn name(&self) -> &String {
        &self.name
    }

    /// Returns a reference to the model identifier of this chat model.
    ///
    /// This function provides read-only access to the internal model identifier
    /// of this ChatModel instance.
    pub fn model(&self) -> &String {
        &self.model
    }

    /// Returns the maximum number of input words allowed for this chat model.
    ///
    /// This function provides access to the word limit configuration value
    /// that specifies the maximum number of input words accepted by
    /// this ChatModel instance.
    pub fn word_limit(&self) -> u32 {
        self.word_limit
    }

    /// Returns the maximum number of output tokens/responses for this chat model.
    ///
    /// This function provides access to the maximum output configuration value
    /// that specifies the upper limit on tokens or responses that can be
    /// generated by this ChatModel instance.
    pub fn max_output(&self) -> u16 {
        self.max_output
    }

    /// Returns a reference to the pricing configuration of this chat model.
    ///
    /// This function provides read-only access to the pricing configuration
    /// that specifies the coin cost and word allowance for this ChatModel instance.
    pub fn pricing(&self) -> &ChatPricing {
        &self.pricing
    }
}

impl ChatPricing {
    /// Returns the number of coins required for this chat model pricing configuration.
    ///
    /// This function provides access to the coin cost value that specifies
    /// how many coins are charged for using this chat pricing configuration.
    pub fn coins(&self) -> u8 {
        self.coins
    }

    /// Returns the number of words provided per coin for this chat model pricing configuration.
    ///
    /// This function provides access to the words-per-coin value that specifies
    /// how many words are provided for each coin spent using this chat pricing configuration.
    pub fn words(&self) -> u8 {
        self.words
    }
}

impl ImageModel {
    /// Returns a reference to the name of this image model.
    ///
    /// This function provides read-only access to the display name
    /// of this ImageModel instance.
    pub fn name(&self) -> &String {
        &self.name
    }

    /// Returns a reference to the model identifier of this image model.
    ///
    /// This function provides read-only access to the internal model identifier
    /// of this ImageModel instance.
    pub fn model(&self) -> &String {
        &self.model
    }

    ///
    /// This function provides read-only access to the pricing configuration
    /// that specifies the coin costs and dimensions for different image formats
    /// (square, landscape, portrait) supported by this ImageModel instance.
    pub fn pricing(&self) -> &ImagePricing {
        &self.pricing
    }
}

impl ImagePricing {
    /// Returns a reference to the square format pricing configuration.
    ///
    /// This function provides read-only access to the pricing configuration
    /// for square format images, including coin cost and dimensions.
    pub fn square(&self) -> &SizePricing {
        &self.square
    }

    /// Returns a reference to the landscape format pricing configuration.
    ///
    /// This function provides read-only access to the pricing configuration
    /// for landscape format images, including coin cost and dimensions.
    pub fn landscape(&self) -> &SizePricing {
        &self.landscape
    }

    /// Returns a reference to the portrait format pricing configuration.
    ///
    /// This function provides read-only access to the pricing configuration
    /// for portrait format images, including coin cost and dimensions.
    pub fn portrait(&self) -> &SizePricing {
        &self.portrait
    }
}

impl SizePricing {
    /// Returns the coin cost for this image size format.
    ///
    /// This function provides access to the number of coins charged
    /// for generating an image using this size format configuration.
    pub fn coins(&self) -> u8 {
        self.coins
    }

    /// Returns a reference to the dimensions of this image size format.
    ///
    /// This function provides read-only access to the dimensions string
    /// in "width x height" format for this size format configuration.
    pub fn size(&self) -> &String {
        &self.size
    }
}
